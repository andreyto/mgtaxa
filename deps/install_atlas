#!/bin/bash
## Building Atlas with full Lapack (this is how it is packaged on e.g. Debian)
## is described as a manual procedure for the stable (3.8.x) series.
## We automated it here with some sed cutting and pasting. See also the note for 
## the next release (currently unstable and failing in other parts).
## As described on Atlas site at INSTALL section:
## 1. Run configure w/o Lapack to get the F77 compiler and its options from the generated Makefile
## 2. In Lapack, cp make.inc.example to make.inc, edit make.inc - replace compiler and options with
## those taken from Atlas Make.inc. Do not forget to add -fPIC to NOOPT variable as well!!!
## Quoted from 
## """
## You can then set make macros in LAPACK's make.inc based on ATLAS's Make.inc macro settings: 
## set LAPACK's FORTRAN to the contents of ATLAS's F77 definition, and LAPACK's OPTS to the 
## contents of ATLAS's F77FLAGS. Then you'll remove the optimization flags from the OPTS flags 
## to create NOOPTS.
## """
## I find the above qoute strange, in that the comment in Make.inc hints at low-optimization interface
## settings for F77FLAGS, which can clearly be detrimental to those LAPACK codes that do not call into the
## Atlas BLAS routines. It still generates -O or -O2, depending on ATLAS version.
## I append -O2 to F77FLAGS when writing them to LAPACK OPTS.
## I also set NOOPT = OPTS because I do not care about debugging.
## NOTE: v. 3.8.2 (works fine in 3.8.3):
## 'cd lib; make shared' fails because it cannot find gfortran. Edit Make.inc and add proper -L flag, e.g.
## F77SYSLIB = -L/local/packages/gcc-4.1.2/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.1.2 -l gfortran
## NOTE: 3.8.2 (3.8.3?)
## 'make install' ignores shared libs. we copy them with 'cp' at the end of the script.
## NOTE: 3.8.2
## This build fixed numpy.linalg.eigh nan bug.
## NOTE: 2010-06-24. The current development release 3.9.25 (those are snapshots, untested) can build LAPACK
## automatically, such as:
##   ../ATLAS/configure --prefix=$INSTMACH --dylibs --shared -Fa alg -fPIC --with-netlib-lapack-tarfile=../lapack/lapack.tgz
##   make
## The above will try to build everything, including the shared libs.
## But the make fails when trying to build the shared libs, because an -fPIC is not apparently propagated to compilation
## of some routines in libatlas.a. There is an open bug on ATLAS site:
## http://sourceforge.net/tracker/?func=detail&aid=2942923&group_id=23725&atid=379482
## This has been reported for 3.9.21, although another user reported on numpy list a success with 3.9.23 but not with
## 3.9.2[4-5]
## http://www.mail-archive.com/numpy-discussion@scipy.org/msg26205.html
##

set -ex #abort if any command fails and echo all commands

source $DEP_SRC_TOP/config/functions.sh

curdir=`pwd`

rm -rf build && mkdir build

cd build
../ATLAS/configure --prefix=$INSTMACH -Fa alg -fPIC
# that generated compiler options, now we transfer them to Lapack
ATLAS_F77="$(get_make_var F77 < Make.inc)"
ATLAS_F77FLAGS="$(get_make_var F77FLAGS < Make.inc)"
cd $curdir/lapack/lapack
cat make.inc.example |\
replace_make_var FORTRAN "$ATLAS_F77" |\
replace_make_var LOADER "$ATLAS_F77" |\
replace_make_var OPTS "$ATLAS_F77FLAGS -O2" |\
replace_make_var NOOPT "$ATLAS_F77FLAGS" > make.inc
make cleanall
make lib

cd $curdir
rm -rf build && mkdir build

cd build
../ATLAS/configure --prefix=$INSTMACH --with-netlib-lapack=$curdir/lapack/lapack/lapack_LINUX.a -Fa alg -fPIC
make
cd lib
make shared
make ptshared
cd ..

## INSTALL
make install
cp -a lib/*.so $INSTMACH/lib/

